// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Challenge {
  id           String  @id @default(uuid())
  slug         String  @unique
  name         String
  introduction String  @default("")
  difficulty   Int     @default(0)
  levels       Level[]

  @@map(name: "challenges")
}

model Level {
  id           String        @id @default(uuid())
  order        Int           @default(0)
  instructions String
  challenge    Challenge     @relation(fields: [challengeId], references: [id])
  challengeId  String
  requirements Requirement[]
  submissions  Submission[]
  tasks        Task[]
  html         String?
  css          String?
  js           String?

  @@map(name: "levels")
}

model Task {
  id      String  @id @default(uuid())
  text    String
  hints   Hint[]
  Level   Level?  @relation(fields: [levelId], references: [id])
  levelId String?

  @@map("tasks")
}

model Rule {
  id           String        @id @default(uuid())
  key          String        @unique
  requirements Requirement[]

  @@map(name: "rules")
}

model Requirement {
  id          String        @id @default(uuid())
  title       String
  description String        @default("")
  level       Level         @relation(fields: [levelId], references: [id])
  levelId     String
  rule        Rule?         @relation(fields: [ruleId], references: [id])
  ruleId      String?
  options     Json?
  CheckResult CheckResult[]

  @@map(name: "requirements")
}

model Hint {
  id     String  @id @default(uuid())
  text   String  @default("")
  Task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?

  @@map(name: "hints")
}

model Submission {
  id      String  @id @default(uuid())
  html    String?
  css     String?
  js      String?
  level   Level   @relation(fields: [levelId], references: [id])
  levelId String
  result  Result?

  @@map(name: "submissions")
}

model Result {
  id           String        @id @default(uuid())
  status       Int           @default(0)
  checkResults CheckResult[]
  Submission   Submission    @relation(fields: [submissionId], references: [id])
  submissionId String

  @@map(name: "results")
}

model CheckResult {
  id            String      @id @default(uuid())
  result        Result      @relation(fields: [resultId], references: [id])
  resultId      String
  requirement   Requirement @relation(fields: [requirementId], references: [id])
  requirementId String
  status        Int

  @@map(name: "check_results")
}
