include:
  - /ci/templates/gitlab-ci-lint.yml
  - /ci/templates/gitlab-ci-test.yml
  - /ci/templates/gitlab-ci-test-end-to-end.yml
  - /ci/templates/gitlab-ci-rules.yml
  - /ci/templates/gitlab-ci-build.yml
  - /ci/templates/gitlab-ci-build-site.yml
  - /ci/templates/gitlab-ci-deploy.yml
  - /ci/templates/gitlab-ci-publish-image.yml

cache:
  key: ${CI_COMMIT_REF_SLUG}-alpine
  paths:
    - .npm-alpine

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled
  VERSION: $CI_COMMIT_SHORT_SHA

default:
  before_script:
    - echo "//gitlab.mediacube.at/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> $PROJECT_PATH/.npmrc
    - npm ci --prefix $PROJECT_PATH --cache .npm-alpine --prefer-offline

stages:
  - generate
  - analyze
  - test
  - build
  - end-to-end-tests
  - deploy

#----------------------------------------------------------------------
#
# Jobs
#
#----------------------------------------------------------------------

#-----------------------------------
# content yml Linting
#-----------------------------------

lint:content:
  extends:
    - .run_on_content_change
  tags:
    - docker
  stage: analyze
  image: node:14-alpine
  needs: []
  before_script:
    - echo "//gitlab.mediacube.at/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    - npm ci --ignore-scripts --cache .npm-alpine
  script:
    - npm run lint:content

#-----------------------------------
# ESLint Config
#-----------------------------------

lint:eslint-config:
  extends:
    - .lint
    - .run_on_eslint_config_change
  needs: []
  variables:
    PROJECT_PATH: packages/eslint-config

release:eslint-config:
  tags:
    - docker
  stage: deploy
  image: node:14-alpine
  variables:
    PROJECT_PATH: packages/eslint-config
  before_script:
    - echo "//gitlab.mediacube.at/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    - echo "//gitlab.mediacube.at/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> $PROJECT_PATH/.npmrc
  script:
    - echo $CI_PROJECT_ID
    - echo $CI_JOB_TOKEN
    - cat .npmrc
    # --prefix behaves strangely when used with publish
    - cd $PROJECT_PATH && npm publish
  only:
    - /^eslint-config-v.*$/
  except:
    - branches
    - triggers

#-----------------------------------
# Submission Checker
#-----------------------------------

lint:submission-checker:
  extends:
    - .lint
    - .run_on_submission-checker_change
  needs: []
  variables:
    PROJECT_PATH: services/submission-checker

test:submission-checker:
  extends:
    - .test
  services:
    - alias: rabbitmq
      name: rabbitmq:management-alpine
  needs: []
  variables:
    PROJECT_PATH: services/submission-checker
    RABBITMQ_DEFAULT_USER: user
    RABBITMQ_DEFAULT_PASS: secret
    SUBMISSION_CHECKER_MESSAGING_RABBITMQ_URL: amqp://user:secret@rabbitmq:5672
  before_script:
    - apk add curl
    - curl -u user:secret -X POST -T docker/rabbitmq/definitions.json http://rabbitmq:15672/api/definitions
    - echo "//gitlab.mediacube.at/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> $PROJECT_PATH/.npmrc
    - npm ci --prefix $PROJECT_PATH --cache .npm-alpine --prefer-offline
  only:
    - master
    - develop
    - merge_request

build:submission-checker:
  extends:
    - .build
  needs:
    - test:submission-checker
  variables:
    PROJECT_PATH: services/submission-checker
    IMAGE_NAME_APP: a11yphant/a11yphant/submission-checker
    IMAGE_APP: $CI_REGISTRY/$IMAGE_NAME_APP:$CI_COMMIT_REF_SLUG
  only:
    - master
    - develop
    - merge_request

#-----------------------------------
# API
#-----------------------------------

generate-graphql-schema:api:
  tags:
    - docker
  stage: generate
  needs: []
  image: node:14-alpine
  variables:
    PROJECT_PATH: services/api
  script: npm run generate-schema --prefix $PROJECT_PATH
  artifacts:
    paths:
      - $PROJECT_PATH/schema.gql
    expire_in: 1 day
  only:
    - master
    - develop
    - merge_request

lint:api:
  extends:
    - .lint
    - .run_on_api_change
  needs: []
  variables:
    PROJECT_PATH: services/api

test:api:
  extends:
    - .test
  services:
    - postgres
  needs: []
  variables:
    POSTGRES_DB: a11yphant
    POSTGRES_USER: a11yphant
    POSTGRES_PASSWORD: secret
    DB_URL: postgresql://a11yphant:secret@postgres:5432/a11yphant
    PROJECT_PATH: services/api
  only:
    - master
    - develop
    - merge_request

build:api:
  tags:
    - docker
  stage: build
  image: docker:20
  needs:
    - test:api
  variables:
    PROJECT_PATH: services/api
    IMAGE_NAME_APP: a11yphant/a11yphant/api
    IMAGE_APP: $CI_REGISTRY/$IMAGE_NAME_APP:$CI_COMMIT_REF_SLUG
  cache: {}
  before_script:
    - echo "//gitlab.mediacube.at/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # api app container
    - docker pull $IMAGE_APP || (docker pull $CI_REGISTRY/$IMAGE_NAME_APP && docker tag $CI_REGISTRY/$IMAGE_NAME_APP $IMAGE_APP || echo "")
    - docker build . -f $PROJECT_PATH/Dockerfile -t $IMAGE_APP --cache-from $IMAGE_APP --build-arg VERSION=$CI_COMMIT_REF_SLUG --secret id=npmrc,src=.npmrc
    - docker push $IMAGE_APP
  only:
    - master
    - develop
    - merge_request

#-----------------------------------
# Site
#-----------------------------------

lint:site:
  extends:
    - .lint
    - .run_on_site_change
  needs:
    - generate-graphql-schema:api
  variables:
    PROJECT_PATH: services/site

test:site:
  extends:
    - .test
  needs:
    - generate-graphql-schema:api
  variables:
    PROJECT_PATH: services/site
  only:
    - master
    - develop
    - merge_request

build:site:
  extends:
    - .build:site
  only:
    - merge_request
    - develop
    - master

#-----------------------------------
# Terraform
#-----------------------------------

terraform:check-format:
  extends:
    - .run_on_terraform_change
  tags:
    - docker
  stage: analyze
  needs: []
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  cache: {}
  before_script:
    - "" # do nothing
  script:
    - terraform -chdir=terraform fmt -recursive -check

terraform:cloud:validate:
  extends:
    - .run_on_terraform_change
  tags:
    - docker
  stage: analyze
  needs: []
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  cache: {}
  before_script:
    - terraform -chdir=terraform/cloud init
  script:
    - terraform -chdir=terraform/cloud validate

#-----------------------------------
# End to end tests
#-----------------------------------

test:end-to-end:
  extends: .test:end-to-end
  stage: end-to-end-tests
  needs:
    - build:api
    - build:site
    - build:submission-checker
  only:
    - merge_request
    - develop
    - master

#-----------------------------------
# Deployment
#-----------------------------------

publish:image:review:
  stage: deploy
  extends: .publish:image
  variables:
    IMAGE_VERSION: $CI_COMMIT_REF_SLUG
  only:
    - merge_request

publish:image:staging:
  stage: deploy
  extends: .publish:image
  variables:
    IMAGE_VERSION: beta
  only:
    - develop

publish:image:production:
  stage: deploy
  extends: .publish:image
  variables:
    IMAGE_NAME: a11yphant/api
    IMAGE_VERSION: beta
  only:
    - master
