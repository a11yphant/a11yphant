include:
  - /ci/templates/gitlab-ci-lint.yml
  - /ci/templates/gitlab-ci-test.yml
  - /ci/templates/gitlab-ci-rules.yml
  - /ci/templates/gitlab-ci-build.yml
  - /ci/templates/gitlab-ci-production-dependencies.yml
  - /ci/templates/gitlab-ci-deploy.yml

cache:
  key: ${CI_COMMIT_REF_SLUG}-alpine
  paths:
    - .npm-alpine

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled

default:
  before_script:
    - npm ci --ignore-scripts --cache .npm-alpine
    - npm ci --prefix $PROJECT_PATH --cache .npm-alpine --prefer-offline

stages:
  - build-packages
  - generate
  - analyze
  - test
  - build
  - deploy
  - post-deployment

#----------------------------------------------------------------------
#
# Jobs
#
#----------------------------------------------------------------------

#-----------------------------------
# NestJS AWS Messaging
#-----------------------------------

lint:nestjs-aws-messaging:
  extends:
    - .lint
    - .run_on_nestjs_aws_messaging_change
  variables:
    PROJECT_PATH: packages/nestjs-aws-messaging

test:nestjs-aws-messaging:
  extends:
    - .test
  variables:
    PROJECT_PATH: packages/nestjs-aws-messaging
  only:
    - master
    - develop
    - merge_request

build:nestjs-aws-messaging:
  tags:
    - docker
  stage: build-packages
  image: docker:20
  variables:
    PROJECT_PATH: packages/nestjs-aws-messaging
    IMAGE_NAME: a11yphant/a11yphant/nestjs-aws-messaging
    IMAGE: $CI_REGISTRY/$IMAGE_NAME:review-$CI_MERGE_REQUEST_IID
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IMAGE || (docker pull $CI_REGISTRY/$IMAGE_NAME && docker tag $CI_REGISTRY/$IMAGE_NAME $IMAGE || echo "")
    - docker build . -f $PROJECT_PATH/Dockerfile -t $IMAGE --cache-from $IMAGE
    - docker push $IMAGE
    # extract artifacts for compatibility with the existing pipeline
    - CONTAINER_ID=$(docker create $IMAGE "")
    - docker cp $CONTAINER_ID:client - > $PROJECT_PATH/client.tar
    - cd $PROJECT_PATH
    - tar -xvf dist.tar
  artifacts:
    expire_in: 1 day
    paths:
      - $PROJECT_PATH/dist
  only:
    - develop
    - master
    - merge_request

#-----------------------------------
# Submission Checker
#-----------------------------------

lint:submission-checker:
  extends:
    - .lint
    - .run_on_submission-checker_change
  variables:
    PROJECT_PATH: services/submission-checker

test:submission-checker:
  extends:
    - .test
  variables:
    PROJECT_PATH: services/submission-checker
  only:
    - master
    - develop
    - merge_request

production-dependencies:submission-checker:
  extends:
    - .production-dependencies
  variables:
    PROJECT_PATH: services/submission-checker
  only:
    - master
    - develop
    - merge_request

build:submission-checker:
  extends:
    - .build
  variables:
    PROJECT_PATH: services/submission-checker
  artifacts:
    paths:
      - $PROJECT_PATH/dist
    expire_in: 1 day
  only:
    - master
    - develop
    - merge_request

#-----------------------------------
# Submission Renderer
#-----------------------------------

lint:submission-renderer:
  extends:
    - .lint
    - .run_on_submission_renderer_change
  variables:
    PROJECT_PATH: services/submission-renderer

test:submission-renderer:
  extends:
    - .test
  variables:
    PROJECT_PATH: services/submission-renderer
  only:
    - master
    - develop
    - merge_request

production-dependencies:submission-renderer:
  extends:
    - .production-dependencies
  variables:
    PROJECT_PATH: services/submission-renderer
  only:
    - master
    - develop
    - merge_request

build:submission-renderer:
  extends:
    - .build
  variables:
    PROJECT_PATH: services/submission-renderer
  artifacts:
    paths:
      - $PROJECT_PATH/dist
    expire_in: 1 day
  only:
    - master
    - develop
    - merge_request

#-----------------------------------
# API
#-----------------------------------

generate-graphql-schema:api:
  tags:
    - docker
  stage: generate
  image: node:14-alpine
  variables:
    PROJECT_PATH: services/api
  before_script:
    - npm ci --ignore-scripts --cache .npm-alpine
    - npm ci --prefix packages/nestjs-aws-messaging --cache .npm-alpine --prefer-offline
    - npm ci --prefix $PROJECT_PATH --cache .npm-alpine --prefer-offline
  script: npm run generate-schema --prefix $PROJECT_PATH
  artifacts:
    paths:
      - $PROJECT_PATH/schema.gql
    expire_in: 1 day
  only:
    - master
    - develop
    - merge_request

lint:api:
  extends:
    - .lint
    - .run_on_api_change
  before_script:
    - npm ci --ignore-scripts --cache .npm-alpine
    - npm ci --prefix packages/nestjs-aws-messaging --cache .npm-alpine --prefer-offline
    - npm ci --prefix $PROJECT_PATH --cache .npm-alpine --prefer-offline
  variables:
    PROJECT_PATH: services/api

test:api:
  extends:
    - .test
  needs:
   - build:nestjs-aws-messaging
  services:
    - postgres
  variables:
    POSTGRES_DB: a11yphant
    POSTGRES_USER: a11yphant
    POSTGRES_PASSWORD: secret
    DB_URL: postgresql://a11yphant:secret@postgres:5432/a11yphant
    PROJECT_PATH: services/api
  before_script:
    - npm ci --ignore-scripts --cache .npm-alpine
    - npm ci --prefix packages/nestjs-aws-messaging --cache .npm-alpine --prefer-offline
    - npm ci --prefix $PROJECT_PATH --cache .npm-alpine --prefer-offline
  only:
    - master
    - develop
    - merge_request

build:api:
  tags:
    - docker
  stage: build
  image: docker:20
  variables:
    PROJECT_PATH: services/api
    IMAGE_NAME_APP: a11yphant/a11yphant/api
    IMAGE_APP: $CI_REGISTRY/$IMAGE_NAME_APP:review-$CI_MERGE_REQUEST_IID
    IMAGE_NAME_RELEASE: a11yphant/a11yphant/api-release
    IMAGE_RELEASE: $CI_REGISTRY/$IMAGE_NAME_RELEASE:review-$CI_MERGE_REQUEST_IID
  cache: {}
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # api app container
    - docker pull $IMAGE_APP || (docker pull $CI_REGISTRY/$IMAGE_NAME_APP && docker tag $CI_REGISTRY/$IMAGE_NAME_APP $IMAGE_APP || echo "")
    - docker build . -f $PROJECT_PATH/Dockerfile -t $IMAGE_APP --cache-from $IMAGE_APP --build-arg VERSION=review-$CI_MERGE_REQUEST_IID
    - docker push $IMAGE_APP
    # api release container
    - docker pull $IMAGE_RELEASE || (docker pull $CI_REGISTRY/$IMAGE_NAME_RELEASE && docker tag $CI_REGISTRY/$IMAGE_NAME_RELEASE $IMAGE_RELEASE || echo "")
    - docker build . -f $PROJECT_PATH/Dockerfile -t $IMAGE_RELEASE --cache-from $IMAGE_RELEASE --build-arg VERSION=review-$CI_MERGE_REQUEST_IID --target release
    - docker push $IMAGE_RELEASE
  only:
    - master
    - develop
    - merge_request

#-----------------------------------
# Site
#-----------------------------------

lint:site:
  extends:
    - .lint
    - .run_on_site_change
  needs:
    - generate-graphql-schema:api
  variables:
    PROJECT_PATH: services/site

test:site:
  extends:
    - .test
  needs:
    - generate-graphql-schema:api
  variables:
    PROJECT_PATH: services/site
  only:
    - master
    - develop
    - merge_request

build:site:
  extends:
    - .build
  needs:
    - generate-graphql-schema:api
  variables:
    PROJECT_PATH: services/site
  artifacts:
    paths:
      - $PROJECT_PATH/.next
    expire_in: 1 day
  only:
    - master
    - develop
    - merge_request

production-dependencies:site:
  extends:
    - .production-dependencies
  variables:
    PROJECT_PATH: services/site
  only:
    - master
    - develop
    - merge_request

#-----------------------------------
# Terraform
#-----------------------------------

terraform:cloud:validate:
  extends:
    - .run_on_terraform_change
  tags:
    - docker
  stage: analyze
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  before_script:
    - terraform -chdir=terraform/cloud init
  script:
    - terraform -chdir=terraform/cloud validate

terraform:local:validate:
  extends:
    - .run_on_terraform_change
  tags:
    - docker
  stage: analyze
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  before_script:
    - terraform -chdir=terraform/local init
  script:
    - terraform -chdir=terraform/local validate

#-----------------------------------
# Deployment
#-----------------------------------

deploy-review:
  extends:
    - .deploy
  variables:
   WORKSPACE: review-${CI_MERGE_REQUEST_IID}
   DOMAIN: review-${CI_MERGE_REQUEST_IID}.a11yphant.com
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://review-${CI_MERGE_REQUEST_IID}.a11yphant.com
    on_stop: stop-environment
  only:
    - merge_request

deploy-staging:
  extends:
    - .deploy
  variables:
    WORKSPACE: staging
    DOMAIN: beta.a11yphant.com
  environment:
    name: staging
    url: https://beta.a11yphant.com
  only:
    - develop

deploy-production:
  extends:
    - .deploy
  variables:
    WORKSPACE: production
    DOMAIN: a11yphant.com
  environment:
    name: production
    url: https://a11yphant.com
  only:
    - master

stop-environment:
  tags:
    - docker
  stage: deploy
  variables:
    WORKSPACE: review-${CI_MERGE_REQUEST_IID}
    DOMAIN: review-${CI_MERGE_REQUEST_IID}.a11yphant.com
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  cache: {} # disable cache
  before_script:
    - terraform -chdir=terraform/cloud init
  script:
    - terraform -chdir=terraform/cloud workspace select $WORKSPACE
    - terraform -chdir=terraform/cloud destroy -var="gitlab_ci_registery_user=$CI_REGISTRY_USER" -var="gitlab_ci_registry_password=$CI_REGISTRY_PASSWORD" -var="heroku_registry_password=$HEROKU_AUTH_TOKEN" -var="domain=$DOMAIN" -var="route53_zone_id=$AWS_ZONE_ID" -var="domain=$DOMAIN" -var="route53_zone_id=$AWS_ZONE_ID" -auto-approve
    - terraform -chdir=terraform/cloud workspace select default
    - terraform -chdir=terraform/cloud workspace delete $WORKSPACE
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - merge_request