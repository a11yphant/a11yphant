.deploy:
  tags:
    - docker
  stage: deploy
  needs:
    - build:api
    - build:site
    - build:submission-checker
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  cache: {} # disable cache
  # prevent concurrent deployment jobs for one workspace
  resource_group: $WORKSPACE
  variables:
    TF_IN_AUTOMATION: 1
  before_script:
    - apk update
    - apk add zip docker-cli
    - terraform -chdir=terraform/cloud init
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
    - ECR_TOKEN=$(docker run --rm -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY amazon/aws-cli ecr get-login-password --region eu-central-1)
    - echo $ECR_TOKEN | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.eu-central-1.amazonaws.com
  script:
    - terraform -chdir="terraform/cloud" workspace new $WORKSPACE || echo ""
    - terraform -chdir=terraform/cloud workspace select $WORKSPACE
    - terraform -chdir=terraform/cloud apply 
                -auto-approve
                -var="gitlab_ci_registery_user=$CI_REGISTRY_USER"
                -var="gitlab_ci_registry_password=$CI_REGISTRY_PASSWORD"
                -var="heroku_registry_password=$HEROKU_AUTH_TOKEN"
                -var="domain=$DOMAIN"
                -var="route53_zone_id=$AWS_ZONE_ID"
                -var="use_custom_domain=$USE_CUSTOM_DOMAIN"
                -var="docker_tag=$CI_COMMIT_REF_SLUG"
                -var="api_dyno_size=${API_DYNO_SIZE:-free}"
                -var="github_client_id=$GITHUB_CLIENT_ID"
                -var="github_client_secret=$GITHUB_CLIENT_SECRET"
                -var="github_callback_url=$GITHUB_CALLBACK_URL"
